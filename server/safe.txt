import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { Button, Form, ListGroup, Nav, Container, Row, Col } from 'react-bootstrap';

const Dashboard = () => {
    const [pages, setPages] = useState([]);
    const [showForm, setShowForm] = useState(false);
    const [editMode, setEditMode] = useState(false);
    const [currentPageId, setCurrentPageId] = useState(null);
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [links, setLinks] = useState([{ url: '', linkTitle: '' }]); // Initialize links as an array
    const [dropdownVisible, setDropdownVisible] = useState(false);
    const [linkType, setLinkType] = useState(null);
    const [profilePicture, setProfilePicture] = useState(null); // State for profile picture
    const [existingImageUrl, setExistingImageUrl] = useState(''); // State for existing image URL

    // New state variables for background and text color
    const [backgroundColor, setBackgroundColor] = useState('#ffffff'); // Default background color
    const [textColor, setTextColor] = useState('#000000'); // Default text color

    // State to manage active section
    const [activeSection, setActiveSection] = useState('page');

    const navigate = useNavigate();

    useEffect(() => {
        fetchPages();
    }, []);

    const fetchPages = async () => {
        const token = localStorage.getItem('token');
        try {
            const response = await axios.get('https://final-project-sha-c27.onrender.com/api/pages', {
                headers: { Authorization: `Bearer ${token}` }
            });
            console.log("Fetched pages:", response.data);
            setPages(response.data);
        } catch (error) {
            console.error("Error fetching pages:", error.response ? error.response.data : error.message);
            alert("Failed to fetch pages.");
        }
    };

    const handleCreatePage = async (event) => {
        event.preventDefault(); // Prevent default form submission
        console.log("Creating page with:", { title, description, links, profilePicture }); // Debugging line
        const token = localStorage.getItem('token');
        const formData = new FormData();
        
        // Append title and description
        formData.append('title', title); 
        formData.append('description', description); 
        formData.append('backgroundColor', backgroundColor); // Add background color
        formData.append('textColor', textColor); // Add text color
        
        // Filter valid links and append them as individual fields
        const validLinks = links.filter(link => link.url && link.linkTitle); // Filter out empty links
        console.log("Valid links:", validLinks); // Debugging line
        validLinks.forEach((link, index) => {
            formData.append(`links[${index}][url]`, link.url);
            formData.append(`links[${index}][linkTitle]`, link.linkTitle);
        });
    
        // Append profile picture if it exists
        if (profilePicture) {
            formData.append('profilePicture', profilePicture); 
        }
    
        try {
            // Make the POST request to create a new page
            const response = await axios.post('https://final-project-sha-c27.onrender.com/api/pages', formData, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                    // Do NOT set Content-Type; let axios handle it automatically
                }
            });
            
            console.log("Page created successfully:", response.data); // Log successful creation
            fetchPages(); // Fetch updated pages list
            resetForm(); // Reset the form fields after successful creation
        } catch (error) {
            console.error("Error creating page:", error.response ? error.response.data : error.message);
        }
    };

    const handleEditPage = async (event) => {
        event.preventDefault(); // Prevent default form submission
        console.log("Updating page with:", { title, description, links, profilePicture }); // Debugging line
        const token = localStorage.getItem('token');
        const formData = new FormData();
        
        // Append title and description
        formData.append('title', title); 
        formData.append('description', description); 
        formData.append('backgroundColor', backgroundColor); // Add background color
        formData.append('textColor', textColor); // Add text color
        
        links.forEach((link, index) => {
            if (link.url && link.linkTitle) {
                formData.append(`links[${index}][url]`, link.url);
                formData.append(`links[${index}][linkTitle]`, link.linkTitle);
            }
        });

        if (profilePicture) {
            formData.append('profilePicture', profilePicture); 
        }

        try {
            await axios.put(`https://final-project-sha-c27.onrender.com/api/pages/${currentPageId}`, formData, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                }
            });
            console.log("Page updated successfully"); // Debugging line
            fetchPages();
            resetForm();
        } catch (error) {
            console.error("Error updating page:", error.response ? error.response.data : error.message);
            alert("Failed to update page.");
        }
    };

    const handleFileChange = (event) => {
        setProfilePicture(event.target.files[0]); // Get the first file
    };

    const handleDeletePage = async (pageId) => {
        const token = localStorage.getItem('token');
        if (window.confirm("Are you sure you want to delete this page?")) {
            try {
                await axios.delete(`https://final-project-sha-c27.onrender.com/api/pages/${pageId}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                fetchPages();
                resetForm();
            } catch (error) {
                console.error("Error deleting page:", error.response ? error.response.data : error.message);
                alert("Failed to delete page.");
            }
        }
    };

    const resetForm = () => {
        setTitle('');
        setDescription('');
        setLinks([{ url: '', linkTitle: '' }]); // Reset links state to initial value
        setShowForm(false);
        setEditMode(false);
        setCurrentPageId(null);
        setLinkType(null);
        setDropdownVisible(false);
        setProfilePicture(null); // Reset profile picture
        setExistingImageUrl(''); // Reset existing image URL when resetting the form

       // Reset color selections when resetting the form
       setBackgroundColor('#ffffff'); 
       setTextColor('#000000'); 
    };

    const handleEditButtonClick = (page) => {
       setTitle(page.title);
       setDescription(page.description);
       setLinks(page.links || [{ url: '', linkTitle: '' }]); // Set links from the selected page or reset to initial value
       setCurrentPageId(page._id);
       setEditMode(true);
       setShowForm(true);

       // Set existing image URL for displaying during edit
       setExistingImageUrl(`https://final-project-sha-c27.onrender.com/uploads/${page.profileImage || ''}`); 

       // Set existing colors for editing
       setBackgroundColor(page.backgroundColor || '#ffffff');
       setTextColor(page.textColor || '#000000');
   };

   const handleLinkChange = (index, field, value) => {
       const newLinks = [...links];
       newLinks[index][field] = value;
       setLinks(newLinks);
   };

   const addLinkField = () => {
       if (linkType) {
           if (linkType === 'youtube' || linkType === 'link') {
               setLinks([...links, { url: '', linkTitle: '' }]);
               resetLinkType();
           }
       }
   };

   const resetLinkType = () => {
       setLinkType(null);
       setDropdownVisible(false);
   };

   const moveLinkUp = (index) => {
       if (index > 0) {
           const newLinks = [...links];
           [newLinks[index], newLinks[index - 1]] = [newLinks[index - 1], newLinks[index]];
           setLinks(newLinks);
       }
   };

   const moveLinkDown = (index) => {
       if (index < links.length - 1) {
           const newLinks = [...links];
           [newLinks[index], newLinks[index + 1]] = [newLinks[index + 1], newLinks[index]];
           setLinks(newLinks);
       }
   };

   const deleteLinkField = (index) => {
       const updatedLinks = links.filter((_, i) => i !== index);
       setLinks(updatedLinks);
   };

   return (
       <Container fluid className="mt-4">
           <Row>
               <Col md={3} className="bg-light sidebar">
                   <h4>Dashboard</h4>
                   <Nav className="flex-column">
                       <Button variant="link" onClick={() => setActiveSection('page')}>Page</Button>
                       <Button variant="link" onClick={() => setActiveSection('analytics')}>Analytics</Button>
                       <Button variant="link" onClick={() => setActiveSection('settings')}>Page Settings</Button>
                   </Nav>
               </Col>
               <Col md={9}>
                   {activeSection === 'page' && (
                       <div>
                           <h2>Pages</h2>
                           {/* List of pages */}
                           <ListGroup className="mt-4">
                               {Array.isArray(pages) && pages.length > 0 ? (
                                   pages.map(page => (
                                       <ListGroup.Item key={page._id} className="d-flex justify-content-between align-items-center">
                                           <div>
                                               Page link: <a href={`https://final-project-sha-c27-1.onrender.com/pages/${page._id}`} target="_blank" rel="noopener noreferrer">{`https://final-project-sha-c27-1.onrender.com/pages/${page._id}`}</a><br />
                                           </div>
                                           <div>
                                               <Button variant="warning" className="me-2" onClick={() => handleEditButtonClick(page)}>Edit</Button>
                                               <Button variant="danger" onClick={() => handleDeletePage(page._id)}>Delete</Button>
                                           </div>
                                       </ListGroup.Item>
                                   ))
                               ) : (
                                   <p>No pages available.</p>
                               )}
                           </ListGroup>

                           {/* Conditionally render the Create Page button */}
                           {pages.length === 0 && (
                               <Button variant="primary" onClick={() => { resetForm(); setShowForm(true); }}>Create Page</Button>
                           )}
                           
                           {/* Form for creating/editing pages */}
                           {showForm && (
                               <div className="mb-4 p-3 border rounded bg-light">
                                   <h3>{editMode ? "Edit Page" : "Create New Page"}</h3>
                                   <Form onSubmit={editMode ? handleEditPage : handleCreatePage}>
                                       <Form.Group controlId="formTitle">
                                           <Form.Label>Title</Form.Label>
                                           <Form.Control 
                                               type="text" 
                                               placeholder="Enter title" 
                                               value={title} 
                                               onChange={(e) => setTitle(e.target.value)} 
                                               required 
                                           />
                                       </Form.Group>
                                       <Form.Group controlId="formDescription">
                                           <Form.Label>Description</Form.Label>
                                           <Form.Control 
                                               as="textarea" 
                                               placeholder="Enter description" 
                                               value={description} 
                                               onChange={(e) => setDescription(e.target.value)} 
                                               required 
                                           />
                                       </Form.Group>

                                       {/* Background Color Picker */}
                                       <Form.Group controlId="formBackgroundColor">
                                           <Form.Label>Background Color</Form.Label>
                                           <Form.Control 
                                               type="color" 
                                               value={backgroundColor} 
                                               onChange={(e) => setBackgroundColor(e.target.value)} 
                                           />
                                       </Form.Group>

                                       {/* Text Color Picker */}
                                       <Form.Group controlId="formTextColor">
                                           <Form.Label>Text Color</Form.Label>
                                           <Form.Control 
                                               type="color" 
                                               value={textColor} 
                                               onChange={(e) => setTextColor(e.target.value)} 
                                           />
                                       </Form.Group>

                                       {/* Display existing image if in edit mode */}
                                       {editMode && existingImageUrl && (
                                           <div>
                                               <h4>Current Image:</h4>
                                               <img src={existingImageUrl} alt="Profile" style={{ maxWidth: '20%', height: 'auto' }} />
                                           </div>
                                       )}

                                       <Form.Group controlId="formProfilePicture">
                                           <Form.Label>Profile Picture</Form.Label>
                                           <Form.Control 
                                               type="file" 
                                               accept="image/*"
                                               onChange={handleFileChange} 
                                           />
                                       </Form.Group>

                                       {/* Links section */}
                                       <h4>Links (Optional)</h4>
                                       {links.map((link, index) => (
                                           <div key={index} className="mb-3">
                                               <Form.Group controlId={`formLinkUrl${index}`}>
                                                   <Form.Control 
                                                       type="text" 
                                                       placeholder="Enter link" 
                                                       value={link.url} 
                                                       onChange={(e) => handleLinkChange(index, 'url', e.target.value)} 
                                                   />
                                               </Form.Group>
                                               <Form.Group controlId={`formLinkTitle${index}`}>
                                                   <Form.Control 
                                                       type="text" 
                                                       placeholder="Link Title" 
                                                       value={link.linkTitle} 
                                                       onChange={(e) => handleLinkChange(index, 'linkTitle', e.target.value)} 
                                                   />
                                               </Form.Group>
                                               {/* Move buttons */}
                                               <Button variant="secondary" onClick={() => moveLinkUp(index)} disabled={index === 0}>Move Up</Button>
                                               <Button variant="secondary" onClick={() => moveLinkDown(index)} disabled={index === links.length - 1}>Move Down</Button>
                                               {/* Delete button */}
                                               <Button variant="danger" onClick={() => deleteLinkField(index)}>Delete</Button>
                                           </div>
                                       ))}
                                       
                                       {/* Add Link button in Edit Mode */}
                                       <Button variant="info" onClick={() => {setDropdownVisible(!dropdownVisible);}}>Add Link</Button>
                                       {dropdownVisible && (
                                           <div className="mt-2">
                                               <Button variant="light" onClick={() => {setLinkType('youtube'); addLinkField();}}>YouTube Video</Button>
                                               <Button variant="light" onClick={() => {setLinkType('link'); addLinkField();}}>Link</Button>
                                           </div>
                                       )}
                                       
                                       {/* Submit and Cancel buttons */}
                                       <div className="mt-3">
                                           {editMode ? (
                                               <Button variant="primary" type="submit">Update</Button>
                                           ) : (
                                               <Button variant="primary" type="submit">Create</Button>
                                           )}
                                           <Button variant="secondary" className="ms-2" onClick={resetForm}>Cancel</Button>
                                       </div>
                                   </Form>
                               </div>
                           )}
                       </div>
                   )}

                   {activeSection === 'analytics' && (
                       <>
                           {/* Analytics Section */}
                           <h2>Analytics</h2>
                           {pages.map(page => (
                               <div key={page._id}>
                                   Views for page '{page.title}': {page.viewCount !== undefined ? page.viewCount : '--'}
                               </div>
                           ))}
                       </>
                   )}

                   {activeSection === 'settings' && (
                       <>
                           {/* Page Settings Section */}
                           <h2>Page Settings</h2>
                           {/* This section is currently empty */}
                           <p>No settings available.</p>
                       </>
                   )}
               </Col>
           </Row>
       </Container>
   );
};

export default Dashboard;
